#!/usr/bin/env php
<?php

// $composerJson = json_decode(
//    file_get_contents(__DIR__.'/../composer.json'),
//    true
// );

$vendorDir    = str_replace(' ', '\\ ', dirname(__DIR__)) . '/vendor';
$dependencies = [
    'psr/http-message' => 'https://github.com/php-fig/http-message/archive/master.zip',
    'psr/log'          => 'https://github.com/php-fig/log/archive/master.zip',
    'psr/simple-cache' => 'https://github.com/php-fig/simple-cache/archive/master.zip',
];

if (!class_exists('ZipArchive') || !function_exists('curl_init')) {
    add_action('admin_notices', function () {
        print '<div class="error"><p>ZipArchive and Curl are required to execute this script.</p></div>';
    });
    exit(50);
}

if (is_dir($vendorDir)) {
    passthru('rm -rf ' . $vendorDir . '/*');
} else {
    passthru('mkdir ' . $vendorDir);
}

$tmpZip = $vendorDir . '/tmp.zip';
foreach ($dependencies as $name => $zipUrl) {
    $dest = $vendorDir . '/' . $name;
    passthru('mkdir -p ' . $dest);

    downloadZipFile($zipUrl, $tmpZip);
    extractZipFile($tmpZip, $dest);
}

passthru('rm -rf ' . $tmpZip);

add_action('admin_notices', function () {
    print '<div class="updated"><p>Dependencies are downloaded inside the vendor folder.</p></div>';
    print "\nRequire the autoload.php file at the root folder to start using the lib.\n";
});

exit(0);

function downloadZipFile($url, $destinationFilePath) {
    $fp = fopen($destinationFilePath, 'w+');
    $ch = curl_init($url);

    //    curl_setopt($ch, CURLOPT_VERBOSE, true);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);
    curl_setopt($ch, CURLOPT_BINARYTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
    curl_setopt($ch, CURLOPT_FILE, $fp);

    $exec = curl_exec($ch);

    curl_close($ch);
    fclose($fp);

    if (false === $exec) {
        print curl_error();
        exit(51);
    }
}

function extractZipFile($zipFileName, $destinationFolderPath) {
    $folderName = basename($destinationFolderPath) . '-master';
    $tmpFolder  = dirname($zipFileName);
    $zip        = new ZipArchive();
    $opened     = $zip->open($zipFileName);

    if (true !== $opened) {
        print "\nCouldn't open $zipFileName\n";
        print $zip->getStatusString();
        exit(52);
    }

    $zip->extractTo($tmpFolder);
    $zip->close();

    rename($tmpFolder . '/' . $folderName, $destinationFolderPath);
}
